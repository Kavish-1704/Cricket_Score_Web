 const [data,setData] = useState([])
  const [loading, Setloader] = useState(true)
  const [error, setError] = useState(false)
  
  const fetchdata = () => {
    Setloader(true)
    fetch('https://api.cricapi.com/v1/currentMatches?apikey=53a845cd-7c86-4ca5-8d95-239e417648f9&offset=0')
    .then((response) => {
      if(!response.ok){
        throw new Error("Error 404(Network response not ok)")
      }return response.json()
    }) 
    .then((json) => { 
      if (json.status === "blocked" || !json.data || json.data.length === 0) {
        throw new Error("API blocked or returned empty data");
      }
      console.log("Api response = " , json)
      setData(Array.isArray(json.data) ? json.data : [])
      Setloader(false)
      setError(null)
      
    })
    .catch((err) => {
      console.warn("Using fallback dummy data:", err.message);
      fetch('/dummydata.json')
        .then(res => res.json())
        .then(localData => {
          setData(localData);
          Setloader(false);
          setError(null);
        })
        .catch(() => {
          setError("Failed to load both API and dummy data");
          Setloader(false);
        })
  })
  useEffect(() =>{  
    fetchdata()
    const interval = setInterval(() => {
      fetchdata()
    },1000)
    return () => clearInterval(interval)
  }, [])

  return ( 
    <div className=' bg-cover bg-center min-h-screen' style={{ backgroundImage: "url('/logos_cricket/Lords_cricket.webp')"}}>
      <Header />
      <div className='flex flex-wrap justify-center-safe mr-7'>
       {
       Array.isArray(data) && data.slice(0,4).map((item,index)=>(
        < Card 
        key={index}
        match={item}
        loading={loading}
        index={index}/>
       )
       )
       }
      </div>
     
    </div>
  )
}}